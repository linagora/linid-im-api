/*
 * Copyright (C) 2020-2025 Linagora
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version, provided you comply with the Additional Terms applicable for LinID Directory Manager software by
 * LINAGORA pursuant to Section 7 of the GNU Affero General Public License, subsections (b), (c), and (e), pursuant to
 * which these Appropriate Legal Notices must notably (i) retain the display of the "LinID™" trademark/logo at the top
 * of the interface window, the display of the “You are using the Open Source and free version of LinID™, powered by
 * Linagora © 2009–2013. Contribute to LinID R&D by subscribing to an Enterprise offer!” infobox and in the e-mails
 * sent with the Program, notice appended to any type of outbound messages (e.g. e-mail and meeting requests) as well
 * as in the LinID Directory Manager user interface, (ii) retain all hypertext links between LinID Directory Manager
 * and https://linid.org/, as well as between LINAGORA and LINAGORA.com, and (iii) refrain from infringing LINAGORA
 * intellectual property rights over its trademarks and commercial brands. Other Additional Terms apply, see
 * <http://www.linagora.com/licenses/> for more details.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License and its applicable Additional Terms for
 * LinID Directory Manager along with this program. If not, see <http://www.gnu.org/licenses/> for the GNU Affero
 * General Public License version 3 and <http://www.linagora.com/licenses/> for the Additional Terms applicable to the
 * LinID Directory Manager software.
 */

package org.linagora.linid.dmapi.controller.handler;

import jakarta.servlet.http.HttpServletRequest;
import java.time.Instant;
import java.util.LinkedHashMap;
import java.util.Map;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.linagora.linid.dmapicore.exception.ApiException;
import org.linagora.linid.dmapicore.i18n.I18nService;
import org.linagora.linid.dmapicore.plugin.route.DynamicRoutingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.NoHandlerFoundException;

/**
 * Global exception handler and fallback router for handling unmapped requests and API-specific errors.
 *
 * <p>This controller is used to:
 * <ul>
 *   <li>Route any request that did not match a specific handler using {@link NoHandlerFoundException}</li>
 *   <li>Provide a standardized structure for {@link ApiException} responses, including internationalized messages</li>
 * </ul>
 *
 * <p>All exceptions handled here are processed into {@link ResponseEntity} objects with consistent error formatting.
 *
 * <p>This class relies on:
 * <ul>
 *   <li>{@link DynamicRoutingService} for fallback routing when no handler is found</li>
 *   <li>{@link I18nService} to translate error messages based on locale</li>
 * </ul>
 *
 * <p>Usage:
 * <pre>
 * - Unmatched route → handled by {@link #handleFallback(HttpServletRequest)}
 * - Known API error → handled by {@link #handleApiException(ApiException)}
 * </pre>
 */
@Slf4j
@ControllerAdvice
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class FallbackRoutingController {

  /**
   * Service used to dynamically handle requests that are not mapped to any specific controller.
   */
  private final DynamicRoutingService dynamicRoutingService;

  /**
   * Service for translating internationalized messages from internal error keys.
   */
  private final I18nService i18nService;

  /**
   * Handles unmatched routes and delegates them to the {@link DynamicRoutingService}.
   *
   * <p>This allows fallback routing behavior such as proxying or redirecting to appropriate dynamic endpoints.
   *
   * @param request the incoming HTTP request that couldn't be matched to a controller
   * @return a dynamic response generated by {@link DynamicRoutingService}
   */
  @ExceptionHandler(NoHandlerFoundException.class)
  public ResponseEntity<?> handleFallback(final HttpServletRequest request) {
    return dynamicRoutingService.route(request);
  }

  /**
   * Handles all {@link ApiException} instances thrown within the application.
   *
   * <p>Generates a standardized error response containing:
   * <ul>
   *   <li>Translated error message</li>
   *   <li>Error key and context</li>
   *   <li>HTTP status code</li>
   *   <li>Timestamp</li>
   *   <li>Additional error details (if any)</li>
   * </ul>
   *
   * <p>If the exception is marked to be logged, it will be logged as an error with the translated message.
   *
   * @param exception the {@link ApiException} to handle
   * @return a {@link ResponseEntity} containing the structured error body and status
   */
  @ExceptionHandler(ApiException.class)
  public ResponseEntity<Map<String, Object>> handleApiException(final ApiException exception) {
    String message = i18nService.translate(exception.getError());

    Map<String, Object> body = new LinkedHashMap<>();
    body.put("error", message);
    body.put("errorKey", exception.getError().key());
    body.put("errorContext", exception.getError().context());
    body.put("status", exception.getStatusCode());
    body.put("timestamp", Instant.now());
    body.putAll(exception.getDetails());

    if (exception.isNeedToBeLogged()) {
      log.error(message, exception);
    }

    return ResponseEntity.status(exception.getStatusCode()).body(body);
  }
}
